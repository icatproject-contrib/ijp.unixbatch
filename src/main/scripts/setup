#!/usr/bin/env python
from setup_utils import *
import os
import socket

# unixbatch

def uninstall():
    app = actions.getAppName("ijp.unixbatch")
    if app: actions.undeploy( app )
    actions.unregisterDB( props["db.name"] )
    
actions, arg, props = getActions("setup.properties", ["container","home","secure","port","db.driver","db.username","db.password","db.name"], binDir=False)

prop_name = "run.properties"
prop_list = ["families.list", "jobOutputDir"]

if arg in ["CONFIGURE", "INSTALL"]:
    actions.configure(prop_name, prop_list) 
    
unixbatchProperties = getProperties(prop_name, prop_list)
    
if arg in ["CONFIGURE", "INSTALL"]:
    actions.checkNoErrors()
    if not actions.configFileExists(unixbatchProperties.get("jobOutputDir")):
        abort("Please create directory " + unixbatchProperties.get("jobOutputDir") + 
               " relative to the config directory as specified in unixbatch.properties")


if arg == "INSTALL":
    actions.installFile(prop_name)
    
    try:           
        uninstall()
        
        actions.registerDB( props["db.name"], props["db.driver"], props["db.url"], props["db.username"], props["db.password"])
            
        actions.deploy(deploymentorder=130, jmsTopicConnectionFactory=unixbatchProperties.get("jms.topicConnectionFactory"), target=props.get("db.target"), logging=props.get("db.logging"))
               
    except Exception, e:
        abort(str(e))
                
if arg == "UNINSTALL":
    unixbatchProperties = actions.getProperties(prop_name, prop_list)   
    actions.removeFile(prop_name)
 
    try:
        uninstall()
    except Exception, e:
        abort(str(e))       
    
            
    
